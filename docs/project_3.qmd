---
title: "Client Report - Finding relationships in baseball."
subtitle: "Course DS 250"
author: "Max Smith"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import sqlite3

# the following for mac users ro download data through the Internet
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
```


## Elevator pitch

In this report we take a look at a baseball database. We query the database to find specific results such as players that played in the MLB and went to school at BYUI. We also worked on grouping the data and aggregating it. We also took a look into using the fields to make new fields by dividing them from one another. There is lots to learn in this report!

```{python}
#| label: project-data
#| code-summary: Read and format project data

# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = 'lahmansbaseballdb.sqlite'
con = sqlite3.connect(sqlite_file)
```

__Highlight the Questions and Tasks__

## QUESTION|TASK 1

Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.


```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here

byui_players = ''' 

SELECT sal.playerid, cp.schoolid, sal.salary, sal.yearid, sal.teamid
FROM collegeplaying as cp
JOIN salaries as sal ON cp.playerid = sal.playerid
WHERE cp.schoolid = 'idbyuid'
ORDER BY salary DESC

'''
byui_results = pd.read_sql_query(byui_players,con)

byui_results

```


## QUESTION|TASK 2

This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)

- a. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.

```{python}
#| label: Q2-a
#| code-summary: Read and format data
# Include and execute your code here

batting_info_a = ''' 

SELECT playerid, yearid, (CAST(H AS REAL) / AB) as  batting_avg
FROM batting
WHERE AB >= 1
ORDER BY batting_avg DESC, playerid
LIMIT 5

'''
batting_results_a = pd.read_sql_query(batting_info_a,con)

batting_results_a
```


- b. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.


```{python}
#| label: Q2-b
#| code-summary: Read and format data
# Include and execute your code here

batting_info_b = ''' 

SELECT playerid, yearid, (CAST(H AS REAL) / AB) as  batting_avg
FROM batting
WHERE AB >= 10
ORDER BY batting_avg DESC, playerid
LIMIT 5

'''
batting_results_b = pd.read_sql_query(batting_info_b,con)

batting_results_b
```

- c. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.

```{python}
#| label: Q2-c
#| code-summary: Read and format data
# Include and execute your code here

batting_info_c = ''' 

SELECT playerid, (CAST(SUM(H) AS REAL) / SUM(AB)) as career_batting_avg
FROM batting
GROUP BY playerid
HAVING SUM(AB) >= 100
ORDER BY career_batting_avg DESC
LIMIT 5

'''
batting_results_c = pd.read_sql_query(batting_info_c,con)

batting_results_c
```


## QUESTION|TASK 3

Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?

I gathered two teams here. One with the best win to loss ratio and the other with the worst. we are comparing their salaries and seeing if that has an affect on their win to loss ratio.

```{python}
#| label: Q3
#| code-summary: Read and format data
# Include and execute your code here

team_info = ''' 

SELECT t.name, SUM(salary) as total_salary, (CAST(SUM(W) AS REAL) /SUM(L)) AS 'win_loss_ratio'
FROM teams as t
JOIN salaries as s ON t.teamid = s.teamid
WHERE t.teamid IN ('NYA', 'MIA')
GROUP BY t.teamid
ORDER BY win_loss_ratio DESC


'''
team_results = pd.read_sql_query(team_info,con)

team_results

```

It is interesting because the New York Highlanders have a better W/L percentage and have a lot higher salary, so based off these two teams it looks like salary has an impact on the teams winning percentage!

```{python}
#| label: Q3-chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
chart = px.bar(team_results,
      x="win_loss_ratio", 
      y="total_salary",
      color = 'name'
)
chart.show()
```


```{python}
#| label: Q3-table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
# mydat = df.head(1000)\
#     .groupby('year')\
#     .sum()\
#     .reset_index()\
#     .tail(10)\
#     .filter(["year", "AK","AR"])

# display(mydat)

```
